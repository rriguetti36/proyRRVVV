<main class="container-fluid mt-4">
    <div class="row">
        <div class="col-12">
            <h1 class="h4 mb-4 text-primary fw-bold">
                üìÇ Carga Respuestas MELER ‚Üí Aceptaci√≥n de solicitudes
            </h1>
            <div class="card shadow-sm">
                <div class="card-header bg-primary text-white">
                    Subir archivo XML
                </div>
                <div class="card-body">
                    <div class="input-group mb-3">
                        <input type="file" id="xmlFile" accept=".xml" class="form-control">
                        <button type="button" class="btn btn-success" id="btnFetch">Procesar</button>
                    </div>
                    <div class="input-group mb-3">
                        <textarea id="xmlMinificado" rows="2" class="form-control font-monospace bg-light"
                            placeholder="Aqu√≠ aparecer√° el XML minificado..."></textarea>

                    </div>
                    <div class="input-group mb-3">
                        <select id="codigoSelect" class="default-select form-control border-s-2 wide">
                            <option selected>Eliga la busqueda...</option>
                            <option value="1">Todos</option>
                            <option value="2">Ganadas otras Compa√±ias</option>
                            <option value="3">Ganadas Compa√±ia</option>
                        </select>
                        <button id="btnBuscar" class="btn btn-primary" type="button">Buscar</button>
                    </div>
                    <div id="numArchivo"></div>
                    <h1>Resultados del XML</h1>
                    <div id="tablaResultados"></div>
                </div>
            </div>
        </div>
    </div>
</main>

<!-- Modal -->
<div class="modal fade" id="modalInfo" tabindex="-1" aria-labelledby="modalInfoLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="modalInfoLabel">Registro de fecha de Aceptaci√≥n</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Cerrar"></button>
            </div>
            <div class="modal-body">
                <form id="modalForm">
                    <div class="row">
                        <div class="col-6">
                            <div class="mb-3">
                                <label class="form-label">CUSPP</label>
                                <input type="text" id="modalCU" class="form-control" readonly>
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Operaci√≥n</label>
                                <input type="text" id="modalOP" class="form-control" readonly>
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Modalidad</label>
                                <input type="text" id="modalMO" class="form-control" readonly>
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Moneda</label>
                                <input type="text" id="modalMN" class="form-control" readonly>
                            </div>
                        </div>
                        <div class="col-6">
                            <div class="mb-3">
                                <label class="form-label">A√±os Temporal</label>
                                <input type="text" id="modalPd" class="form-control" readonly>
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Periodo Garantizado</label>
                                <input type="text" id="modalPg" class="form-control" readonly>
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Pension</label>
                                <input type="text" id="modalPE" class="form-control" readonly>
                            </div>
                        </div>
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Fecha Aceptaci√≥n</label>
                        <input type="date" id="modalFecha" class="form-control">
                    </div>
                </form>
                <div id="msgError" class="mt-2"></div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
                <button type="button" class="btn btn-secondary" id="btnValidar">Validar</button>
                <button type="button" class="btn btn-success" id="btnGuardarModal" disabled>Guardar</button>
            </div>
        </div>
    </div>
</div>

<script>
    document.getElementById("xmlFile").addEventListener("change", function (event) {
        const file = event.target.files[0];
        if (!file) return;

        const reader = new FileReader();

        reader.onload = function (e) {
            const xmlString = e.target.result;

            try {
                // Minificar XML (remueve saltos de l√≠nea y espacios extra)
                const xmlMin = xmlString.replace(/\s{2,}|\n|\r/g, "");
                document.getElementById("xmlMinificado").value = xmlMin;

                //agregarLog("‚úÖ XML cargado y procesado correctamente.");
            } catch (error) {
                //agregarLog("‚ùå Error procesando XML: " + error.message);
            }
        };

        reader.readAsText(file);
    });

    document.getElementById("btnFetch").addEventListener("click", async () => {
        try {
            const xmlContent = document.getElementById("xmlMinificado").value.trim();

            if (!xmlContent) {
                alert("‚ö†Ô∏è Pegue un XML antes de procesar.");
                return;
            }

            const res = await fetch("http://localhost:3000/cotizador/api/cargaresultado", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ xmlMinificado: xmlContent }),
            });

            if (!res.ok) {
                const errMsg = await res.text();
                throw new Error(errMsg || "Error en la petici√≥n");
            }

            const data = await res.json(); // ‚Üê ahora esperamos JSON
            const idArchivo = data.id;
            const resultados = data.resultados || [];

            const containerId = document.getElementById("numArchivo");
            containerId.innerHTML = `<input type="hidden" id="idarch" value=${idArchivo}>`;


            const container = document.getElementById("tablaResultados");

            if (resultados.length === 0) {
                container.innerHTML = "<p>No se encontraron resultados en el XML.</p>";
                return;
            }

            // Construir tabla din√°mica
            let table = `
                        <div class="table-responsive" style="max-height: 500px; overflow-y: auto; overflow-x: auto;">
                            <table class="table table-striped table-bordered table-hover align-middle">
                            <thead class="table-dark" style="position: sticky; top: 0; z-index: 2;">
                                <tr>
                                ${Object.keys(resultados[0])
                    .map((key) => `<th>${key}</th>`)
                    .join("")}
                                </tr>
                            </thead>
                            <tbody>
                                ${resultados
                    .map(
                        (row) =>
                            `<tr>${Object.values(row)
                                .map((val) => `<td>${val}</td>`)
                                .join("")}</tr>`
                    )
                    .join("")}
                            </tbody>
                            </table>
                        </div>
                        `;

            container.innerHTML = table;

        } catch (err) {
            console.error("‚ùå Error:", err);
            document.getElementById("tablaResultados").innerHTML =
                "<p style='color:red;'>‚ùå Error procesando el XML.</p>";
        }
    });

    document.getElementById("btnBuscar").addEventListener("click", async () => {
        try {
            const idArchivo = document.getElementById("idarch").value;
            const tipo = document.getElementById("codigoSelect").value;
            const body = {
                idArchivo,
                tipo
            };

            const res = await fetch("http://localhost:3000/cotizador/api/respuestas", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify(body)
            });

            if (!res.ok) {
                const errMsg = await res.text();
                throw new Error(errMsg || "Error en la petici√≥n");
            }

            const data = await res.json(); // ‚Üê ahora esperamos JSON
            const resultados = data.resultados || [];
            const container = document.getElementById("tablaResultados");

            if (resultados.length === 0) {
                container.innerHTML = "<p>No se encontraron resultados en el XML.</p>";
                return;
            }

            // Construir tabla din√°mica
            let table = `
<div class="table-responsive" style="max-height: 500px; overflow-y: auto; overflow-x: auto;">
    <table class="table table-striped table-bordered table-hover align-middle">
        <thead class="table-dark" style="position: sticky; top: 0; z-index: 2;">
            <tr>
                ${Object.keys(resultados[0])
                    .map((key) => `<th>${key}</th>`)
                    .join("")}
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            ${resultados
                    .map(
                        (row, index) =>
                            `<tr>
                            ${Object.values(row)
                                .map((val) => `<td>${val}</td>`)
                                .join("")}
                            <td>
                                <button class="btn btn-sm btn-primary" 
                                    data-bs-toggle="modal" 
                                    data-bs-target="#modalInfo" 
                                    data-pd="${row.pd}" 
                                    data-pg="${row.pg}" 
                                    data-cu="${row.CUSPP}"
                                    data-op="${row.nroOperacion}"
                                    data-mo="${row.modalidad}"
                                    data-mn="${row.moneda}"
                                    data-pe="${row.pensionAseg}"
                                    data-index="${index}">
                                    Aceptaci√≥n
                                </button>
                            </td>
                        </tr>`
                    )
                    .join("")}
        </tbody>
    </table>
</div>
`;

            container.innerHTML = table;

        } catch (err) {
            console.error("‚ùå Error:", err);
            document.getElementById("tablaResultados").innerHTML =
                "<p style='color:red;'>‚ùå Error procesando el XML.</p>";
        }
    });

    document.addEventListener("DOMContentLoaded", () => {
        const modalInfo = document.getElementById("modalInfo");

        // Cuando el modal se abre, llenar datos
        modalInfo.addEventListener("show.bs.modal", (event) => {
            const button = event.relatedTarget;
            const pd = button.getAttribute("data-pd");
            const pg = button.getAttribute("data-pg");
            const cu = button.getAttribute("data-cu");
            const mo = button.getAttribute("data-mo");
            const mn = button.getAttribute("data-mn");
            const pe = button.getAttribute("data-pe");
            const op = button.getAttribute("data-op");

            document.getElementById("modalPd").value = pd;
            document.getElementById("modalPg").value = pg;
            document.getElementById("modalCU").value = cu;
            document.getElementById("modalMO").value = mo;
            document.getElementById("modalMN").value = mn;
            document.getElementById("modalPE").value = pe;
            document.getElementById("modalOP").value = op;

            document.getElementById("modalFecha").value = ""; // limpio el datepicker
        });

        // Guardar valores
        document.getElementById("btnGuardarModal").addEventListener("click", () => {
            const pd = document.getElementById("modalPd").value;
            const pg = document.getElementById("modalPg").value;
            const fecha = document.getElementById("modalFecha").value;

            if (!fecha) {
                alert("Por favor seleccione una fecha de aceptaci√≥n.");
                return;
            }

            console.log("Datos enviados:", { pd, pg, fecha });

            // Aqu√≠ puedes hacer un fetch POST al backend
            /*
            fetch("/api/guardarAceptacion", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ pd, pg, fecha })
            }).then(r => r.json()).then(resp => {
                console.log("Guardado", resp);
            });
            */

            // Cerrar modal
            const modal = bootstrap.Modal.getInstance(modalInfo);
            modal.hide();
        });
    });

    const btn = document.getElementById("btnValidar");
    const msgError = document.getElementById("msgError");

    btn.addEventListener("click", async function () {
        // Limpiar mensajes anteriores
        msgError.innerHTML = "";

        // Tomar valores de inputs
        const datos = {
            arc: document.getElementById("idarch").value,
            ope: document.getElementById("modalOP").value,
            mod: document.getElementById("modalMO").value,
            mon: document.getElementById("modalMN").value,
            pd: document.getElementById("modalPd").value,
            pg: document.getElementById("modalPg").value,
            pens: document.getElementById("modalPE").value
        };

        // Mostrar cargando
        btn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Validando...';
        btn.disabled = true;

        try {
            const response = await fetch("http://localhost:3000/cotizador/api/validasol", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify(datos)
            });

            const data = await response.json();
            const mensaje = data.mensaje;
            if (mensaje === "Ok") {
                // √âxito
                btn.innerHTML = '<i class="fas fa-check"></i> Validado';
                btn.classList.remove("btn-primary");
                btn.classList.add("btn-success");
                // Activar bot√≥n Guardar
                btnGuardar.disabled = false;
            } else {
                // Error ‚Üí mostrar mensaje con bot√≥n cerrar
                btn.innerHTML = '<i class="fas fa-times"></i> Error';
                btn.classList.remove("btn-primary");
                btn.classList.add("btn-danger");

                msgError.innerHTML = `
                <div class="alert alert-danger alert-dismissible fade show" role="alert">
                  ${mensaje}
                  <button type="button" class="btn-close" id="btnCerrarError"></button>
                </div>
            `;

                // Acci√≥n del bot√≥n cerrar
                document.getElementById("btnCerrarError").addEventListener("click", () => {
                    msgError.innerHTML = "";
                    btn.innerHTML = "Validar";
                    btn.className = "btn btn-primary";
                    btn.disabled = false;
                });
            }
        } catch (err) {
            btn.innerHTML = '<i class="fas fa-times"></i> Error conexi√≥n';
            btn.classList.remove("btn-primary");
            btn.classList.add("btn-danger");

            msgError.innerHTML = `
            <div class="alert alert-danger alert-dismissible fade show" role="alert">
              No se pudo conectar con el servidor
              <button type="button" class="btn-close" id="btnCerrarError"></button>
            </div>
        `;

            // Acci√≥n del bot√≥n cerrar
            document.getElementById("btnCerrarError").addEventListener("click", () => {
                msgError.innerHTML = "";
                btn.innerHTML = "Validar";
                btn.className = "btn btn-primary";
                btn.disabled = false;
            });
        }
    });


</script>